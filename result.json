{
    "content": {
      "core": {
        "title": "Core services",
        "description": "Most of the time, you will need these services.",
        "logo": "https://avatars2.githubusercontent.com/u/16935616?s=200&v=4",
        "items": {
          "kafka": {
            "title": "DRIVER+ test-bed core",
            "description": "The test-bed allows you to trial and test different solutions in the crisis-management domain.",
            "logo": "https://avatars2.githubusercontent.com/u/16935616?s=200&v=4",
            "website": "http://driver-project.eu",
            "depends_on": null,
            "services": [
              "zookeeper",
              "broker",
              "schema_registry",
              "kafka_schema_registry_ui",
              "kafka_topics_ui"
            ],
            "parameters": {
              "ZOOKEEPER_CLIENT_PORT": 3500,
              "KAFKA_BROKER_PORT": 3501,
              "SCHEMA_REGISTRY_PORT": 3502
            }
          },
          "rest": {
            "title": "REST interface",
            "description": "REST interface for accessing content.",
            "logo": "https://avatars2.githubusercontent.com/u/16935616?s=200&v=4",
            "website": "http://driver-project.eu",
            "depends_on": [
              "core"
            ],
            "services": [
              "kafka_rest"
            ],
            "parameters": {
              "KAFKA_REST_PORT": 3501
            }
          },
          "connect": {
            "title": "REST interface",
            "description": "REST interface for accessing content.",
            "logo": "https://avatars2.githubusercontent.com/u/16935616?s=200&v=4",
            "website": "http://driver-project.eu",
            "depends_on": [
              "core"
            ],
            "services": [
              "connect",
              "kafka_connect_ui"
            ],
            "parameters": {
              "ZOOKEEPER_CLIENT_PORT": 3500,
              "KAFKA_BROKER_PORT": 3501,
              "SCHEMA_REGISTRY_PORT": 3502
            }
          }
        }
      },
      "utils": {
        "title": "Utilities",
        "description": "These can be practical when starting to integrate existing applications to the test-bed",
        "logo": "https://avatars2.githubusercontent.com/u/16935616?s=200&v=4",
        "items": {
          "mbtiles": {
            "title": "MBtiles service",
            "description": "The MBtiles service allows you to host your own mbtiles, e.g. with OpenStreetMap data.",
            "logo": "https://avatars2.githubusercontent.com/u/16935616?s=200&v=4",
            "website": "http://driver-project.eu",
            "depends_on": null,
            "services": [
              "mbtiles"
            ],
            "parameters": {
              "MBTILES_PORT": 3701
            }
          },
          "wms": {
            "title": "WMS-lite service",
            "description": "WMS is a well known GIS standard to display overlays on maps. This WMS lite service allows you to view GeoJSON messages as WMS.",
            "logo": "https://avatars2.githubusercontent.com/u/16935616?s=200&v=4",
            "website": "http://driver-project.eu",
            "depends_on": null,
            "services": [
              "core"
            ],
            "parameters": {
              "WMS_LITE_PORT": 3702
            }
          }
        },
        "management": null,
        "simulation": null,
        "solutions": null
      }
    },
    "services": {
      "zookeeper": {
        "image": "confluentinc/cp-zookeeper",
        "hostname": "zookeeper",
        "ports": [
          "3500:3500"
        ],
        "environment": {
          "ZOOKEEPER_CLIENT_PORT": 3500,
          "ZOOKEEPER_TICK_TIME": 2000
        }
      },
      "broker": {
        "image": "confluentinc/cp-kafka",
        "hostname": "broker",
        "depends_on": [
          "zookeeper"
        ],
        "ports": [
          "3501:3501"
        ],
        "environment": {
          "KAFKA_BROKER_ID": 1,
          "KAFKA_ZOOKEEPER_CONNECT": "zookeeper:3500",
          "KAFKA_ADVERTISED_LISTENERS": "PLAINTEXT://broker:3501",
          "KAFKA_LISTENERS": "PLAINTEXT://0.0.0.0:3501",
          "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR": 1,
          "KAFKA_DEFAULT_REPLICATION_FACTOR": 1,
          "KAFKA_MESSAGE_MAX_BYTES": 100000000,
          "KAFKA_REPLICA_FETCH_MAX_BYTES": 100000000
        }
      },
      "schema_registry": {
        "image": "confluentinc/cp-schema-registry",
        "hostname": "schema_registry",
        "depends_on": [
          "zookeeper",
          "broker"
        ],
        "ports": [
          "3502:3502"
        ],
        "environment": {
          "SCHEMA_REGISTRY_HOST_NAME": "schema_registry",
          "SCHEMA_REGISTRY_LISTENERS": "http://0.0.0.0:3502",
          "SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL": "zookeeper:3500"
        }
      },
      "kafka_rest": {
        "image": "confluentinc/cp-kafka-rest",
        "hostname": "kafka_rest",
        "depends_on": [
          "zookeeper",
          "schema_registry",
          "broker"
        ],
        "ports": [
          "8082:8082"
        ],
        "environment": {
          "KAFKA_REST_HOST_NAME": "kafka_rest",
          "KAFKA_REST_BOOTSTRAP_SERVERS": "PLAINTEXT://broker:3501",
          "KAFKA_REST_ZOOKEEPER_CONNECT": "zookeeper:3500",
          "KAFKA_REST_LISTENERS": "http://0.0.0.0:8082",
          "KAFKA_REST_SCHEMA_REGISTRY_URL": "http://schema_registry:3502",
          "KAFKA_CONSUMER_REQUEST_TIMEOUT_MS": 30000,
          "KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS": "GET,POST,PUT,DELETE,OPTIONS",
          "KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN": "*"
        }
      },
      "kafka_topics_ui": {
        "image": "landoop/kafka-topics-ui",
        "hostname": "kafka_topics_ui",
        "depends_on": [
          "kafka_rest"
        ],
        "ports": [
          "3600:8000"
        ],
        "environment": {
          "KAFKA_REST_PROXY_URL": "http://kafka_rest:8082",
          "PROXY": "true"
        }
      },
      "kafka_schema_registry_ui": {
        "image": "landoop/schema-registry-ui",
        "hostname": "kafka_schema_registry_ui",
        "depends_on": [
          "schema_registry"
        ],
        "ports": [
          "3601:8000"
        ],
        "environment": {
          "SCHEMAREGISTRY_URL": "http://schema_registry:3502",
          "PROXY": "true"
        }
      },
      "kafka_connect_ui": {
        "image": "landoop/kafka-connect-ui",
        "hostname": "kafka_connect_ui",
        "depends_on": [
          "connect"
        ],
        "ports": [
          "3602:8000"
        ],
        "environment": {
          "CONNECT_URL": "http://connect:3504",
          "PROXY": "true"
        }
      },
      "connect": null
    }
  }